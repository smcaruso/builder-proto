/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/glb/cat.glb -o src/components/Cat.tsx -i -k -K 
Files: public/glb/cat.glb [75.35KB] > /Users/matt/Desktop/Napster/cat/src/components/cat-transformed.glb [5.07KB] (93%)
*/

import * as THREE from "three";
import { type JSX } from "react";
import { isMobile } from "react-device-detect";

import { useGLTF, MeshTransmissionMaterial } from "@react-three/drei";
import { type GLTF } from "three-stdlib";

type CatModelType = GLTF & {
  nodes: {
    Chin: THREE.Mesh;
    Crown: THREE.Mesh;
    Ear_L: THREE.Mesh;
    Ear_R: THREE.Mesh;
    Eye_L: THREE.Mesh;
    Eye_R: THREE.Mesh;
    Jaw_L: THREE.Mesh;
    Jaw_R: THREE.Mesh;
    Neck: THREE.Mesh;
    Nose: THREE.Mesh;
  };
  // materials: {
  //   Material: THREE.MeshStandardMaterial;
  // };
};

// const mat = useMemo(() => {
//   const material = new THREE.MeshStandardMaterial();
//   material.color.set("orange");
//   material.roughness = 0;
//   material.normalMap = new THREE.CanvasTexture(
//     // @ts-ignore
//     new FlakesTexture(),
//     THREE.UVMapping,
//     THREE.RepeatWrapping,
//     THREE.RepeatWrapping
//   );
//   material.normalMap.repeat.set(40, 40);
//   material.normalScale.set(0.1, 0.1);
//   return material;
// }, []);

const path = "/model/cat.glb";

const Mat = () => {
  // More performant fallback for mobile
  if (isMobile) {
    return <meshStandardMaterial color="#fff" roughness={0.25} metalness={1} />;
  }
  return (
    <MeshTransmissionMaterial
      backside
      samples={8}
      resolution={512}
      thickness={0.3}
      roughness={0.25}
      anisotropy={1}
      chromaticAberration={0.2}
    />
  );
};

const CatModel = (props: JSX.IntrinsicElements["group"]) => {
  const { nodes } = useGLTF(path) as unknown as CatModelType;

  return (
    <group {...props} dispose={null}>
      <group>
        {/* Ears */}
        <mesh name="Ear_L" geometry={nodes.Ear_L.geometry}>
          <Mat />
        </mesh>
        <mesh name="Ear_R" geometry={nodes.Ear_R.geometry}>
          <Mat />
        </mesh>
        {/* Crown */}
        <mesh name="Crown" geometry={nodes.Crown.geometry}>
          <Mat />
        </mesh>
        {/* Eyes */}
        <mesh name="Eye_L" geometry={nodes.Eye_L.geometry}>
          <Mat />
        </mesh>
        <mesh name="Eye_R" geometry={nodes.Eye_R.geometry}>
          <Mat />
        </mesh>
        {/* Nose */}
        <mesh name="Nose" geometry={nodes.Nose.geometry}>
          <Mat />
        </mesh>
        {/* Jaw */}
        <mesh name="Jaw_L" geometry={nodes.Jaw_L.geometry}>
          <Mat />
        </mesh>
        <mesh name="Jaw_R" geometry={nodes.Jaw_R.geometry}>
          <Mat />
        </mesh>
        {/* Other */}
        <mesh name="Chin" geometry={nodes.Chin.geometry}>
          <Mat />
        </mesh>
        <mesh name="Neck" geometry={nodes.Neck.geometry}>
          <Mat />
        </mesh>
      </group>
    </group>
  );
};

useGLTF.preload(path);

export default CatModel;
